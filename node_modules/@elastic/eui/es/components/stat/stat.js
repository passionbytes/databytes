import "core-js/modules/es6.object.assign";
import "core-js/modules/web.dom.iterable";
import "core-js/modules/es6.array.iterator";
import "core-js/modules/es6.object.keys";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { EuiText } from '../text';
import { EuiTitle, TITLE_SIZES } from '../title/title';
var colorToClassNameMap = {
  default: null,
  subdued: 'euiStat__title--subdued',
  primary: 'euiStat__title--primary',
  secondary: 'euiStat__title--secondary',
  danger: 'euiStat__title--danger',
  accent: 'euiStat__title--accent'
};
export var COLORS = Object.keys(colorToClassNameMap);
var textAlignToClassNameMap = {
  left: 'euiStat--leftAligned',
  center: 'euiStat--centerAligned',
  right: 'euiStat--rightAligned'
};
export var ALIGNMENTS = Object.keys(textAlignToClassNameMap);
export var EuiStat = function EuiStat(_ref) {
  var children = _ref.children,
      className = _ref.className,
      description = _ref.description,
      title = _ref.title,
      titleSize = _ref.titleSize,
      titleColor = _ref.titleColor,
      textAlign = _ref.textAlign,
      reverse = _ref.reverse,
      rest = _objectWithoutProperties(_ref, ["children", "className", "description", "title", "titleSize", "titleColor", "textAlign", "reverse"]);

  var classes = classNames('euiStat', textAlignToClassNameMap[textAlign], className);
  var titleClasses = classNames('euiStat__title', colorToClassNameMap[titleColor]);
  var descriptionDisplay = React.createElement(EuiText, {
    size: "s",
    className: "euiStat__description"
  }, React.createElement("p", null, description));
  var titleDisplay = React.createElement(EuiTitle, {
    size: titleSize,
    className: titleClasses
  }, React.createElement("p", null, title));
  var statDisplay;

  if (reverse) {
    statDisplay = React.createElement(Fragment, null, titleDisplay, descriptionDisplay);
  } else {
    statDisplay = React.createElement(Fragment, null, descriptionDisplay, titleDisplay);
  }

  return React.createElement("div", _extends({
    className: classes
  }, rest), statDisplay, children);
};
EuiStat.propTypes = {
  /**
   * Set the title (value) text
   */
  title: PropTypes.node.isRequired,

  /**
   * Set the description (label) text
   */
  description: PropTypes.node.isRequired,

  /**
   * Places the title (value) above the description (label)
   */
  reverse: PropTypes.bool.isRequired,

  /**
   * Define the size of the title text. See EuiTitle for sizing options ('s', 'm', 'l'... etc)
   */
  titleSize: PropTypes.oneOf(TITLE_SIZES),

  /**
   * Define the color of the title text
   */
  titleColor: PropTypes.oneOf(COLORS),

  /**
   * Define how you want the content aligned
   */
  textAlign: PropTypes.oneOf(ALIGNMENTS),

  /**
   * Appends additional classes to parent
   */
  className: PropTypes.string,

  /**
   * Additional content that appears after the title and description
   */
  children: PropTypes.node
};
EuiStat.defaultProps = {
  titleColor: 'default',
  textAlign: 'left',
  titleSize: 'l',
  reverse: false
};
EuiStat.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "EuiStat",
  "props": {
    "titleColor": {
      "defaultValue": {
        "value": "'default'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"default\"",
          "computed": false
        }, {
          "value": "\"subdued\"",
          "computed": false
        }, {
          "value": "\"primary\"",
          "computed": false
        }, {
          "value": "\"secondary\"",
          "computed": false
        }, {
          "value": "\"danger\"",
          "computed": false
        }, {
          "value": "\"accent\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Define the color of the title text"
    },
    "textAlign": {
      "defaultValue": {
        "value": "'left'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "value": [{
          "value": "\"left\"",
          "computed": false
        }, {
          "value": "\"center\"",
          "computed": false
        }, {
          "value": "\"right\"",
          "computed": false
        }]
      },
      "required": false,
      "description": "Define how you want the content aligned"
    },
    "titleSize": {
      "defaultValue": {
        "value": "'l'",
        "computed": false
      },
      "type": {
        "name": "enum",
        "computed": true,
        "value": "TITLE_SIZES"
      },
      "required": false,
      "description": "Define the size of the title text. See EuiTitle for sizing options ('s', 'm', 'l'... etc)"
    },
    "reverse": {
      "defaultValue": {
        "value": "false",
        "computed": false
      },
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Places the title (value) above the description (label)"
    },
    "title": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": "Set the title (value) text"
    },
    "description": {
      "type": {
        "name": "node"
      },
      "required": true,
      "description": "Set the description (label) text"
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Appends additional classes to parent"
    },
    "children": {
      "type": {
        "name": "node"
      },
      "required": false,
      "description": "Additional content that appears after the title and description"
    }
  }
};